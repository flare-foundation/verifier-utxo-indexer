.test_template: &test
  stage: test
  variables:
    GIT_STRATEGY: none
  image:
    name: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    entrypoint: [""]
  only:
    - branches

stages:
  - build
  - test
  - deploy

build_branches:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "$CI_COMMIT_SHA" > COMMIT_HASH
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --cache=true --cache-ttl=120h
  only:
    - branches

build_tags:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "$CI_COMMIT_SHA" > COMMIT_HASH
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG --cache=true --cache-ttl=120h
  only:
    - tags

test_django:
  stage: test
  variables:
    GIT_STRATEGY: none
    POSTGRES_DB: "db"
    DB_NAME: "db"
    POSTGRES_USER: "dbuser"
    DB_USER: "dbuser"
    POSTGRES_PASSWORD: "dbpass"
    DB_PASSWORD: "dbpass"
    DB_HOST: "postgresdb"
    DB_PORT: "5432"
    NODE_RPC_URL: "https://provide_me"
    AUTH_USERNAME: authuser
    AUTH_PASSWORD: authpass
  services:
    - name: postgres:15
      alias: postgresdb
  image:
    name: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    entrypoint: [""]
  script:
    - cd /app
    - coverage run --source="." manage.py test --settings=project.settings.ci_testing
    - coverage xml
    - mv coverage.xml $CI_PROJECT_DIR/
    - mv testreport.xml $CI_PROJECT_DIR/
  after_script:
    - cp /app/testreport.xml ${CI_PROJECT_DIR}/junit-report.xml
  artifacts:
    reports:
      junit: testreport.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - branches

test_ruff:
  <<: *test
  script:
    - cd /app
    - python -m ruff check .
    - python -m ruff format --check
